name: BPCA_CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

#  build-and-deploy:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@master
#    - uses: azure/login@v1
#      with:
#        creds: ${{ secrets.AZURE_CREDENTIALS }}
#    - uses: azure/arm-deploy@v1
#      with:
#        subscriptionid: d0a6a73f-691c-429a-91e7-b3878855370d
#        resourceGroupName: CSDCA1
#        template: ./AzureARM/azuredeploy.json
        

  build:
 #   needs: build-and-deploy
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
       fetch-depth: 0
       
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      working-directory: BPCalculator
    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: BPCalculator
      
    - name: Run unit tests
      run: dotnet test BloodPressureUnitTests/BloodPressureUnitTests.csproj --verbosity normal
      
    - name: Run Specflow tests
      run: dotnet test SpecFlowBloodPressureTests/SpecFlowBloodPressureTests.csproj --verbosity normal
    
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
       fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
        
    - name: Restore dependencies
      run: dotnet restore
      working-directory: BPCalculator
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: BPCalculator
      
    - name: Sonarqube Begin
      run: | 
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /o:"swoods91" /k:"swoods91_CSDCA1" /d:sonar.login=${{ secrets.SONAR_TOKEN }} /s:$GITHUB_WORKSPACE/SonarQube.Analysis.xml /d:sonar.exclusions=/CSDCA1/E2ETests/**

    - name: Build
      run: dotnet build

    - name: Test with the dotnet CLI
      run: dotnet test --settings coverlet.runsettings --logger:trx
      env:
       ASPNETCORE_ENVIRONMENT: Development

    - name: Sonarqube end
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       
  depchecktest:
    runs-on: ubuntu-latest
    name: depecheck_test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'BloodPressure'
          path: '.'
          format: 'HTML'    
          args: >
            --failOnCVSS 7
            --enableRetired
            
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports   
           
  deploy_test_blue_green:                                             
    name: deploy to staging slot, run E2E tests, swap slots
    needs: build
    environment:
      name: qa-staging
      url: https://sw-bloodpressureapp-qa-staging.azurewebsites.net                         
    runs-on: windows-latest
    env:
      AZURE_WEBAPP_NAME: SW-BloodPressureApp      # set this to your application's name
      AZURE_WEBAPP_PACKAGE_PATH: '.'       # set this to the path to your web app project
    steps:
    - uses: actions/checkout@v2

    # publish web app ready for deployment
    - name: Publish web app
      run:  dotnet publish -c Release -o ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp
      
    # login to Azure account
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.secrets.AZURE_CREDENTIALS }}                         # JSON objects whic represents service principal  
    
    # Deploy to Azure app service to staging slot using publish profile for staging slot
    - name: Run Azure webapp deploy action using publish profile credentials
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}                            
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE  }}     # Define secret variable in environment
        slot-name: qa-staging
        package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'    
     
    #Run Webdriver tests on staging env 
    - name: Run Webdriver E2E tests
      run: dotnet test E2ETests/E2ETests.csproj --verbosity normal    

    # blue/green
    - name: swap QA and production slots
      run: |
        az webapp deployment slot swap -n SW-BloodPressureApp -g CSDCA1 --slot qa-staging --target-slot production
       
  k6_load_test:
      name: k6 Load Test
      needs: deploy_test_blue_green
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v2

      - name: Pull Docker image for k6
        run: docker pull loadimpact/k6

      - name: Run k6 load test, capture report
        run: docker run -i loadimpact/k6 run - <k6Tests/perf1.js > k6report.txt

      - uses: actions/upload-artifact@v2
        with:
         name: k6report
         path: k6report.txt 

  OWASP_ZAP:
     needs: deploy_test_blue_green
     name: ZAP Bloodpressure
     env:
      URI: https://sw-bloodpressureapp-qa-staging.azurewebsites.net     
     runs-on: ubuntu-latest
     
     steps:

     - name: Pull Docker image for ZAP
       run: docker pull owasp/zap2docker-weekly

     - name: Run baseline scan
       run: docker run -v /report:/zap/wrk/:rw --user root -t owasp/zap2docker-weekly zap-baseline.py -t ${{env.URI}} -I -r zapreport.html
  
     - uses: actions/upload-artifact@v2
       name: upload ZAP report
       with:
        name: ZAPreport
        path: /report/zapreport.html
