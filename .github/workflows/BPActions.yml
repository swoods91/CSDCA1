name: BPCA_CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
       fetch-depth: 0
       
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      working-directory: BPCalculator
    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: BPCalculator
      
    - name: Run unit tests
      run: dotnet test BloodPressureUnitTests/BloodPressureUnitTests.csproj --verbosity normal
      
    - name: Run Specflow tests
      run: dotnet test SpecFlowBloodPressureTests/SpecFlowBloodPressureTests.csproj --verbosity normal
    
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
       fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
        
    - name: Restore dependencies
      run: dotnet restore
      working-directory: BPCalculator
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: BPCalculator
      
    - name: Sonarqube Begin
      run: | 
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /o:"swoods91" /k:"swoods91_CSDCA1" /d:sonar.login=${{ secrets.SONAR_TOKEN }} /s:$GITHUB_WORKSPACE/SonarQube.Analysis.xml

    - name: Build
      run: dotnet build

    - name: Test with the dotnet CLI
      run: dotnet test --settings coverlet.runsettings --logger:trx
      env:
       ASPNETCORE_ENVIRONMENT: Development

    - name: Sonarqube end
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       
  depchecktest:
    runs-on: ubuntu-latest
    name: depecheck_test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'BloodPressure'
          path: '.'
          format: 'HTML'    
          args: >
            --failOnCVSS 7
            --enableRetired
            
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports   
           
  deploy_test_blue_green:                                             
    name: deploy to staging slot, run E2E tests, swap slots
    needs: build
    environment:
      name: QA
      url: https://sw-bloodpressureapp.azurewebsites.net                                
    runs-on: windows-latest
    env:
      AZURE_WEBAPP_NAME: BloodPressureCalculator        # set this to your application's name
      AZURE_WEBAPP_PACKAGE_PATH: 'dotnet publish'       # set this to the path to your web app project
    steps:
    - uses: actions/checkout@v2

    # publish web app ready for deployment
    - name: Publish web app
      run: dotnet publish -c Release -o ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp
    
    # Deploy to Azure app service to staging slot using publish profile for staging slot
    - name: Run Azure webapp deploy action using publish profile credentials
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}                            
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE  }}     # Define secret variable in environment
        slot-name: staging
        package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'         
       
  k6_load_test:
      name: k6 Load Test
      runs-on: ubuntu-latest

      steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run local k6 test
        uses: k6io/action@v0.1
        with:
         filename: BloodPressure.cs   
